apply plugin: 'com.android.application'

buildscript {
    repositories {
//        jcenter()
        maven{
            url uri("../repo")
        }
    }
    dependencies{
        classpath 'com.leeks.plugin:hello:1.0.3'
    }

}
apply plugin: 'plugin.test1'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    compileOptions {
        sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
        targetCompatibility = rootProject.ext.targetCompatibilityVersion
    }

    defaultConfig {
        applicationId "com.demo.android"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }
    }
    buildTypes {
        debug{
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding{
        enabled true
    }

    lintOptions {
        abortOnError false
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile deps.supportv4
    compile deps.appcompatv7
    compile deps.recyclerviewv7
    compile deps.cardviewv7
    compile deps.design
    compile deps.picasso
    compile project(':apt')
    //    annotationProcessor (':apt')
    testCompile 'junit:junit:4.12'
    compile files('libs/loader.jar')
}

sourceSets{
    main{
        java.srcDirs(['src/main/java','src/main/aidl'])
    }
}

task meet {
    println 'meet'
}

task sayhi {
    doFirst {
        println 'first'
    }
    doLast {
        println 'last'
    }
    println "hi, execution"
}

sayhi.dependsOn meet

task check_safe {
    println 'check'
}

task pass {
    println 'pass'
}

pass.mustRunAfter check_safe
        { variant->
    if(variant.install){
        tasks.create(name : "${variant.name.capitalize()}",
        dependsOn: variant.install){
            description "Installs the ${variant.description} and runs the main launcher activity."
        }
    }

//    doFirst{
//        def classpath = variant.applicationId
//        if(variant.buildType.applicationIdSuffix){
//            classpath -= "${variant.buildType.applicationIdSuffix}"
//        }
//        def launchClass = "${variant.applicationId}/${classpath}.MainActivity"
//        exec {
//            executable='adb'
//            args = ['shell', 'am', 'start', '-n', launchClass]
//        }
//    }

}
afterEvaluate{
    android.applicationVariants.all{ variant->
        println("++++" + variant.name)
        println("----" + variant.outputs.first())
    }
}

tasks.whenTaskAdded { task->
//    println("------------")
//    println(task.name)
    if("assembleDebug".equals(task.name)){
        task.doFirst {
            println("begin assemble debug.")
        }
    }
}


